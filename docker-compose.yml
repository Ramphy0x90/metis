version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: metis-postgres-${ENVIRONMENT:-dev}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-metis_dev}
      POSTGRES_USER: ${POSTGRES_USER:-metis}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-metis123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - metis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-metis} -d ${POSTGRES_DB:-metis_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: ${RESTART_POLICY:-no}

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: metis-redis-${ENVIRONMENT:-dev}
    volumes:
      - redis_data:/data
    networks:
      - metis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: ${RESTART_POLICY:-no}

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: metis-backend-${ENVIRONMENT:-dev}
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - DATABASE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB:-metis_dev}
      - DATABASE_USERNAME=${POSTGRES_USER:-metis}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-metis123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DATABASE=${REDIS_DATABASE:-0}
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key-for-development-only-change-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION:-604800000}
      - SERVER_PORT=${SERVER_PORT:-8080}
      - SERVER_CONTEXT_PATH=${SERVER_CONTEXT_PATH:-/}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin@admin.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-password}
      - DEBUG_ENABLED=${DEBUG_ENABLED:-false}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      metis-network:
        aliases:
          - metis-app-dev
      traefik-network:
        aliases:
          - metis-app-dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.metis.rule=Host(`metiss.ch`) && PathPrefix(`/api`)"
      - "traefik.http.routers.metis.entrypoints=websecure"
      - "traefik.http.routers.metis.tls=true"
      - "traefik.http.routers.metis.tls.certresolver=letsencrypt"
      - "traefik.http.services.metis.loadbalancer.server.port=8080"

volumes:
  postgres_data:
  redis_data:

networks:
  metis-network:
    driver: bridge

  traefik-network:
    external: true
